name: "ClamAV Security Scan"
description: "Runs ClamAV antivirus scanner with configurable options"

inputs:
  scan_scope:
    description: "Scope of files to scan (all/changed)"
    required: false
    default: "changed"
  paths:
    description: "Paths to scan when using all scope"
    required: false
    default: "."
  exclude_dirs:
    description: "Directories to exclude from scan"
    required: false
    default: ".git,node_modules,venv"
  max_file_size:
    description: "Maximum file size to scan in MB"
    required: false
    default: "100"
  max_scan_size:
    description: "Maximum scan data size in MB"
    required: false
    default: "400"
  output_format:
    description: "Format for scan results (json/txt)"
    required: false
    default: "json"
  fail_on_findings:
    description: "Whether to fail the action if threats are found"
    required: false
    default: "true"

outputs:
  scan_result:
    description: "Exit code of the ClamAV scan"
    value: ${{ steps.run-clamav.outputs.exit_code }}
  report_path:
    description: "Path to the generated report file"
    value: ${{ steps.run-clamav.outputs.report_path }}
  threats_found:
    description: "Number of threats found during scan"
    value: ${{ steps.run-clamav.outputs.threats_found }}

runs:
  using: composite
  steps:
    - name: Install ClamAV
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y clamav clamav-daemon
        sudo systemctl stop clamav-freshclam

    - name: Update virus definitions
      shell: bash
      run: |
        # Configure freshclam
        sudo sed -i 's/^DatabaseMirror.*/DatabaseMirror database.clamav.net/' /etc/clamav/freshclam.conf

        # Update the database
        sudo freshclam --quiet

        # Wait for the update to complete
        sleep 5

    - name: Get changed files
      if: inputs.scan_scope == 'changed'
      id: changed-files
      uses: tj-actions/changed-files@v41

    - name: Run ClamAV scan
      id: run-clamav
      shell: bash
      run: |
        REPORT_FILE="clamav-report.${{ inputs.output_format }}"
        EXCLUDE_DIRS=$(echo "${{ inputs.exclude_dirs }}" | tr ',' ' ' | sed 's/[^ ]* */--exclude-dir=&/g')

        # Convert MB to bytes for ClamAV
        MAX_FILE_SIZE=$(( ${{ inputs.max_file_size }} * 1024 * 1024 ))
        MAX_SCAN_SIZE=$(( ${{ inputs.max_scan_size }} * 1024 * 1024 ))

        if [[ "${{ inputs.scan_scope }}" == "changed" && -n "${{ steps.changed-files.outputs.all_changed_files }}" ]]; then
          echo "Running ClamAV on changed files"
          FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          SCAN_CMD="clamscan"
        else
          echo "Running ClamAV on all files in ${{ inputs.paths }}"
          FILES="${{ inputs.paths }}"
          SCAN_CMD="clamscan -r"
        fi

        # Create temporary file for raw scan output
        TEMP_OUTPUT=$(mktemp)

        echo "Running scan with max file size: ${MAX_FILE_SIZE} bytes"
        echo "Running scan with max scan size: ${MAX_SCAN_SIZE} bytes"

        ${SCAN_CMD} \
          --max-filesize=${MAX_FILE_SIZE} \
          --max-scansize=${MAX_SCAN_SIZE} \
          ${EXCLUDE_DIRS} \
          ${FILES} 2>&1 | tee ${TEMP_OUTPUT}

        SCAN_EXIT_CODE=${PIPESTATUS[0]}
        echo "exit_code=${SCAN_EXIT_CODE}" >> $GITHUB_OUTPUT

        # Count number of threats found
        THREATS=$(grep -c "FOUND" ${TEMP_OUTPUT} || true)
        echo "threats_found=${THREATS}" >> $GITHUB_OUTPUT

        # Generate report in requested format
        if [[ "${{ inputs.output_format }}" == "json" ]]; then
          {
            echo "{"
            echo "  \"scan_summary\": {"
            echo "    \"files_scanned\": $(grep "Scanned files:" ${TEMP_OUTPUT} | awk '{print $3}'),"
            echo "    \"threats_found\": ${THREATS},"
            echo "    \"scan_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\""
            echo "  },"
            echo "  \"threats\": ["
            grep "FOUND" ${TEMP_OUTPUT} | awk '{
              printf "    {\"file\": \"%s\", \"threat\": \"%s\"}%s\n",
              substr($1, 1, length($1)-1),
              $NF,
              (NR == total ? "" : ",")
            }' total=$(grep -c "FOUND" ${TEMP_OUTPUT} || echo 0)
            echo "  ]"
            echo "}"
          } > "${REPORT_FILE}"
        else
          cp ${TEMP_OUTPUT} "${REPORT_FILE}"
        fi

        echo "report_path=${REPORT_FILE}" >> $GITHUB_OUTPUT

        rm ${TEMP_OUTPUT}

        if [[ "${{ inputs.fail_on_findings }}" == "true" && ${THREATS} -gt 0 ]]; then
          exit 1
        fi
